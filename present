#!/usr/bin/env ruby

require 'open3'

Signal.trap("INT") { 
  exit
}

class PresentationComposer
  class << self
    def require(start_at, &block)
      new(&block).run(start_at)
    end
    
    def load(file, start_at = nil)
      new.load(file).run(start_at)
    end
  end

  attr_reader :steps, :current_step
  def initialize(&block)
    @steps = []
    @current_step = 0
    instance_eval &block if block
  end
  
  def load(file)
    instance_eval(IO.read(file), file, 1)
    self
  end

  def step(heading = nil, options = {}, &block)
    steps.push(Step.new(heading, block, options))
  end

  def cat(args)
    cmd "cat #{args}"
  end

  def pprof(args)
    cmd "go tool pprof #{args}"
  end

  def print_heading(text)
    " #{text} ".
      highlight(".", color: :blue).
      print

    puts
  end
  
  def sub_heading(text, options = {})
    options[:color] ||= :subheading
    " #{text} ".
      highlight('.', options).
      indent.
      print
      
      puts
  end
  
  def file_path(text)
    sub_heading(text, color: :file_path)
  end
  
  def instruction(text)
    text.
      highlight(".", color: :yellow).
      indent
  end
  
  def center(text)
    longest_line = text.lines.max {|l| l.size }
    
    text.indent((tty_size / 2) - (longest_line.size / 2))
  end

  def cmd(string) 
    %x[#{string}]
  end

  def wait
    STDIN.getc
  end
  
  def tty_size
    `tput cols`.chomp.to_i
  end
  
  def title(text, options = {})
    figleted = text.figlet

    figleted.
      highlight('.', options).
      indent((tty_size / 2).to_i - (figleted.lines.first.size / 2)).
      print
  end
  
  def side_by_side(lhs, rhs)
    column_width = tty_size / 2
    lhs_lines = lhs.lines.map {|l| l.chomp.ljust(column_width) }
    
    lhs_lines.zip(rhs.lines.first(lhs_lines.size)).map do |l, r|
      l + " " + r
    end.join
  end
  
  def divider
    step_number = "#{current_step} "
    step = steps[current_step]
    step_number << "#{step.section} " if step.section
    
    total_size = tty_size
    
    if (next_step = steps[current_step + 1]) && next_step.section
      offset = step_number.size + next_step.section.to_s.size + 2
      line = "—" * (total_size - offset)
      "#{step_number}#{line}> #{next_step.section}".
        highlight('.', color: :light_grey).
        print
    else
      (step_number + ("—" * (total_size - step_number.size))).
        highlight('.', color: :light_grey).
        print
    end
  end
  
  def resolve_location(starting_at)
    case starting_at
    when /^\d+$/
      starting_at.to_i
    when /^\w+/
      s = steps.find {|s| s.section == starting_at.to_sym }
      s ? steps.index(s) : 0
    else
      0
    end
  end

  def run(starting_at)
    starting_index = resolve_location(starting_at)
    @current_step = starting_index
    
    steps.each_with_index do |step, index|
      if index >= starting_index
        if index > 0
          divider
          puts
        end
        print_heading(step.heading) if step.heading
        if step.executation_dir 
          Dir.chdir(step.executation_dir) do
            instance_eval(&step.code)
          end
        else
          instance_eval(&step.code)
        end
        @current_step += 1
        wait
      end
    end
  end

  class Step
    attr_reader :heading, :code, :options

    def initialize(heading, code, options)
      @heading = heading
      @code = code
      @options = options
    end
    
    def executation_dir
      options[:dir]
    end
    
    def section
      options[:section]
    end
  end
end

class String
  def pipe(rhs)
    stdin, stdout, _ = Open3.popen2(rhs)
    stdin.puts self
    stdin.close
    out = stdout.read
    stdout.close
    out
  end
  
  def grep(args)
    pipe("grep #{args}")
  end

  def indent(columns = 3)
    lines.map {|line| 
      (" " * columns) + line
    }.join
  end

  COLOR = {
    red: '1;37;41',
    green:  '1;37;42',
    yellow: '1;37;43',
    blue: '1;48;5;39',
    money: '48;5;22',
    light_grey: '38;5;238',
    closing_credits: '48;5;241',
    subheading: '1;48;5;39',
    json: '48;5;202',
    jitjson: '48;5;150',
    ast: '48;5;53',
    file_path: '48;5;100'
  }
  
  def colorize(text, color)
    "\e[#{COLOR[color]}m#{text}\e[0m"
  end

  def highlight(pattern, options = {})
    options[:color] ||= :green
    options[:full_line] ||= pattern == '.'
    
    pattern = options[:full_line] ? /^.*#{pattern}.*$/ : /#{pattern}/
    lines.map do |line|
      line.gsub(pattern) do |match|
        colorize(match, options[:color])
      end
    end.join
  end
  
  def figlet
    pipe("figlet -f thin -w 200")
  end
  
  def head(number = 10)
    lines.first(number).join
  end
  
  def tail(number = 10)
    lines.last(number).join
  end

  def syntax_highlight(options = {})
    language = options[:lang] ||= "go"
    
    pipe("highlight --stdout -O xterm256 --syntax #{language} -l -s Candy -t 4")
  end

  def print
    puts self
  end
end

if __FILE__ == $0
  PresentationComposer.load(*ARGV.first(2))
  
  # TODO flag to print out a summary of sections
  # TODO Generate markdown version (wouldn't be able to include the interactive parts)
end