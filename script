#!/usr/bin/ruby

reflection_dir = "#{ENV['GOMISC']}/benchmarks/reflection/map/pprof"
benchmark_test = cat(File.join(reflection_dir, "../benchmark_test.go"))
jit_dir = ENV['JIT']
jit_bench_dir = File.join(jit_dir, "benchmarks")
string_concat_dir = "#{ENV['GOMISC']}/benchmarks/stringconcat"
string_concat = cat(File.join(string_concat_dir, "benchmark_string_concat_test.go"))
media_structs = cat(File.join(jit_dir, "fixtures/media/media.go"))
nav_encoder = cat(File.join(jit_dir, "fixtures/navigation/json_encoders.go"))
encoding_buffer = cat(File.join(jit_dir, "encoding/buffer.go"))

step do
  title("Reflection in Go", color: :money)
  
  wait 
  
  center("Reflection is often verbose or cryptic or slow or all three").print  
end

step "C# — Invoke a method", section: :csharp do  
  
  c_sharp_reflection =<<-CSHARP
  Assembly myAssembly = Assembly.LoadFile(@"D:\\ClassLibrary1\\Debug\\ClassLibrary1.dll"); 
  Type myType = myAssembly.GetType("ClassLibrary1.clsCalculation");
  object objInstance = Activator.CreateInstance(myType);
  Type objectTypes = objInstance.GetType();
  objectTypes.InvokeMember(
    "PrintClassName", 
    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.InvokeMethod | BindingFlags.Instance, 
    null, 
    objInstance, 
    null
  );
  CSHARP
  
  c_sharp_reflection.syntax_highlight(lang: "csharp").print
end

step "Scala — Invoke a method", section: :scala do
  scala_reflection =<<-SCALA
  def companion[T](name : String)(implicit man: Manifest[T]) : T = {
    Class.forName(name + "$").getField("MODULE$").get(man.erasure).asInstanceOf[T]
  }

  val result = companion[SomeTrait]("SomeObject").someMethod
  SCALA
  
  scala_reflection.syntax_highlight(lang: "scala").print
end

step "Java — Invoke a method", section: :java do
  java_reflection =<<-JAVA
  try {
    Class<?> c = obj.getClass();
    method = c.getDeclaredMethod(methodName, param1.class, param2.class);
  } catch (SecurityException e) { ... }
    catch (NoSuchMethodException e) { ... }
    
  try {
    method.invoke(obj, arg1, arg2);
  } catch (IllegalArgumentException e) { ... }
    catch (IllegalAccessException e) { ... }
    catch (InvocationTargetException e) { ... }
  JAVA
  
  java_reflection.syntax_highlight(lang: "java").print
end
  
step "Lisp — No idea" do
  lisp_reflection =<<-LISP
  ;; No idea
  (set-macro-characer #\\{
    (lambda (str)
      (let ((type (read-char str)))
            (l (read-delimited-list
                            #\\} str)))
        (case type
          (#\\c `(call 'this
                       ',(car l)
                        ,@(cdr l)))
          (#\\i `(getInstVar 'this
                            ',(car l)))))))
  LISP
  
  lisp_reflection.syntax_highlight(lang: "lisp").print
  
  wait
    
  sub_heading("What about Go?")
end

step "Let's start with a simple example" do
  benchmark_test.
    grep("-A 3 'type Person'").
    syntax_highlight.
    print
    
    puts 
    
  benchmark_test.
    grep("-A 7 'var collection'").
    syntax_highlight.
    print

  puts
  " ... etc".indent.print
end

step "Produce a Slice of Full Names" do
  wait
  
  sub_heading("Standard Go Way")
    
  benchmark_test.
    grep("-A 6 'func forLoop'").
    syntax_highlight.
    print

  wait
    
  sub_heading("With Reflection")
  
  benchmark_test.
    grep("-A 4 'func mapConcat'").
    syntax_highlight.
    print
end

step "Map: interface{} and reflect.Value" do
  file_path("github.com/marcel/misc/benchmarks/reflection/map/benchmark_test.go")
  
  benchmark_test.
    grep("-A 22 'func Map\('").
    syntax_highlight.
    print
end

step "Benchmark: For Loop vs Map", dir: reflection_dir, section: :forvsmap do
  benchmark_test.
    grep("-A 5 'func Benchmark'").
    syntax_highlight.
    print
end
  
step "Results:", dir: reflection_dir do
  cat("*cpu.1.bench").
    grep("Bench").
    highlight("Loop", color: :green, full_line: true).
    highlight("Map", color: :red, full_line: true).
    print
        
    results = ["  5.5x Faster ", " 3x Less Garbage ", " 3.5x Fewer Allocs "].join(" | ")

    results.
      highlight('.', color: :json).
      indent(42).
      print
  
end

step "Sources of allocations in Map", dir: reflection_dir do
  pprof("-text -alloc_space ../map.test map.mem.0").
    highlight("reflect\\..*$", color: :red).
    print
end

step "Sources of allocation in Map --cumulative", dir: reflection_dir do
  pprof("-cum -text -alloc_space ../map.test map.mem.0").
    highlight("reflect\\.", color: :red, full_line: true).
    highlight("0%[ ]*0%[  ]*64", color: :green, full_line: true).
    print
end

step do
  benchmark_test.
    grep("-A 14 'func mapSlice'").
    syntax_highlight.
    print
end

step "Visualization of CPU time", dir: reflection_dir do
  wait
  
  instruction("For Loop: Time spent in runtime").print
  wait
  cmd "open for*cpu.1.svg"
  
  wait
  instruction("Map: Time spent in reflect vs runtime").print
  wait
  cmd "open *map*cpu.1.svg"
end

step "Visualization of memory", dir: reflection_dir do
  instruction("For Loop: % of allocations from concat").print
  wait
  cmd "open for*mem.0.svg"
  wait
  
  instruction("Map: % of allocations from concat").print
  wait
  cmd "open *map*mem*.0.svg"
end

step nil, dir: reflection_dir do
  "-> list mapSlice".
    highlight(".", color: :yellow, full_line: true).
    print
  
  system "go tool pprof -alloc_space ../map.test map.mem.0"
end

step nil, section: :trash do
  center("Observation: Reflection adds lots of allocations and garbage").
    ljust(tty_size).
    highlight('.', color: :subheading).
    print
  
  puts 
  
  trash =<<-TRASH
       ________________   ___/-\\___     ___/-\\___     ___/-\\___
     / /             ||  |---------|   |---------|   |---------|
    / /              ||   |       |     | | | | |     |   |   |
   / /             __||   |       |     | | | | |     | | | | |
  / /   \\\\        I  ||   |       |     | | | | |     | | | | |
 (-------------------||   | | | | |     | | | | |     | | | | |
 ||               == ||   |_______|     |_______|     |_______|
 ||   GO REFLECTION  | =============================================
 ||          ____    |                                ____      |
( | o      / ____ \\                                 / ____ \\    |)
 ||      / / . . \\ \\                              / / . . \\ \\   |
[ |_____| | .   . | |____________________________| | .   . | |__]
          | .   . |                                | .   . |
           \\_____/                                  \\_____/
  TRASH
  
  center(trash).print
  
  wait 
  
  center("    Ok...let's just avoid reflection...").
    ljust(tty_size).
    highlight('.', color: :subheading).
    print
end

step nil, dir: jit_dir, section: :json do
  title("JSON", color: :json)
  
  puts
  
  route = cat("fixtures/navigation/example.json")
  album = cat("fixtures/media/example.json")
    
  side_by_side(route.head(25), album.head(25)).
    syntax_highlight(lang: "json").
    print
end

step "Encoding a struct as JSON" do
  code =<<-CODE
  type Person struct {
    First string `json:"first_name"`
    Last  string `json:"last_name"`
  }
  
  person := Person{"Marcel", "Molina"}
  
  bytes, err := json.Marshal(&person)
  CODE
  
  code.syntax_highlight.print
  
  wait
  
  sub_heading("Output")
  
  json = <<-JSON
  {
    "first_name": "Marcel",
    "last_name": "Molina"
  }
  JSON
  
  json.syntax_highlight(lang: "json").print
  
  wait
  
  sub_heading("Very simple interface!")
end

step "Go does this with reflection" do
  file_path("encoding/json/encode.go")
  code =<<-CODE
  func (e *encodeState) marshal(v interface{}, opts encOpts) (err error) {
    // ...
  	e.reflectValue(reflect.ValueOf(v), opts)
  	return nil
  }
  CODE
  
  code.syntax_highlight.print
end

step "Let's profile `json.Marshal(&route)`", dir: jit_bench_dir do
  [
    " Inherent Work ".highlight('.', color: :green),
    " Overhead ".highlight('.', color: :red),
    " Overhead Tax ".highlight('.', color: :yellow)
  ].join(" ").print
  
  puts
  
  pprof("-text -cum benchmarks.test prof.reflect.nav.cpu.0").
    head(27).
    highlight("encoding\/json\.[^M]", color: :red, full_line: true).
    highlight("bytes", color: :green, full_line: true).
    highlight("runtime.(?:m|gc)", color: :yellow, full_line: true).
    print
end

step "Let's take a deeper look", dir: jit_bench_dir do
  instruction('1. list \-fm (passing reflect.Type around)').print
  instruction('2. list Encoder\).encode (reflecting on fields)').print
  
  puts
  
  system "go tool pprof benchmarks.test prof.reflect.nav.cpu.0"
end

step "Visualize % of inherent work done", dir: jit_bench_dir do
  instruction("encoding/json vs runtime.m").print
    
  wait
  
  cmd "open prof.reflect.nav.cpu.0.svg"
end

step do
  inherent_work = " 20% Inherent Work "
  overhead = " 80% Overhead ".ljust(inherent_work.size * 4)
  
  ("[" + ("+" * (inherent_work.size - 1)) + ("-" * (overhead.size - 1)) + "]").indent.print
  
  [
    inherent_work.highlight('.', color: :green),
    overhead.highlight('.', color: :red)
  ].join.indent.print
  
  [" runtime.makeslice   ", "        reflect -> reflect -> reflect -> reflect"].join.indent.print
end

step "What are our options?", section: :marshaler, dir: jit_dir do
  
  wait
  
  sub_heading("Roll your own encoder with json.Marshaler interface")
  
  iface_code = <<-CODE
  // Marshaler is the interface implemented by types that
  // can marshal themselves into valid JSON.
  type Marshaler interface {
    MarshalJSON() ([]byte, error)
  }
  CODE
  
  iface_code.syntax_highlight.print
end

step do
  sub_heading("For a struct like this...")
  
  media_structs.
    grep("-A 12 'type Album struct'").
    syntax_highlight.
    print
    
  wait
  
  sub_heading("...we'd have to write a method like this")
    
  code = <<-CODE
  func (a *Album) MarshalJSON() ([]byte, error) {
      buf := new(bytes.Buffer)
      
      buf.WriteByte('{')
      buf.WriteString(fmt.Sprintf("\\"album_type\\": \\"%s\\"", a.AlbumType))
      buf.WriteByte(',')
      buf.WriteString(fmt.Sprintf("\\"popularity\\": \\"%d\\"", a.Popularity))
      buf.WriteByte('[')
      for _, artist := range a.Artists {
        // encode artist
      }
      buf.WriteByte(']')
      buf.WriteByte(',')
      buf.WriteByte('[')
      for _, market := range a.AvailableMarkets {
        // encode market
      }
      buf.WriteByte(']')
      buf.WriteByte(',')
      buf.WriteByte('[')
      for _, genre := range a.Genres {
        // encode genre
      }
      buf.WriteByte(']')
      buf.WriteByte(',')
      
      // plus Images, Label, Name, ReleaseDate, Tracks, PopularityByMarket
      
      buf.WriteByte('}')
      
      return buf.Bytes(), nil
  }
  CODE
  
  code.syntax_highlight.print
  
  wait
  
  sub_heading("...and we'd have to do the same for Artist, Track, Image, etc...")
end

step do
  sub_heading("That's a ton of work")
  
  wait
  
  inherent_work = " 100% Inherent Work "
  overhead = "              ".ljust(inherent_work.size * 4)
  ("[" + ("+" * (inherent_work.size - 1)) + ("+" * (overhead.size - 1)) + "]").indent.print
  inherent_work.ljust(inherent_work.size * 5).highlight('.', color: :green).indent.print
  puts
  puts
  sub_heading("But it could theoretically be 5x faster")
end

step nil, section: :jitjson do
  title("jitjson", color: :jitjson)
  puts
  cmd("jitjson --help").indent.print
end

step nil, dir: jit_dir do
  sub_heading("% jitjson list")
  
  cmd("jitjson list").indent.print
  
  wait
  
  sub_heading("% jitjson list fixtures/navigation --full")
  
  cmd("jitjson list fixtures/navigation --full").indent.print
end

step nil, section: :gen do
  sub_heading("% jitjson gen fixtures/navigation")
    
  nav_encoder.
    head(21).
    syntax_highlight.
    print
    
    "// ... etc".indent.print
end

step nil, section: :routeStruct do
  nav_encoder.
    grep("-A 20 'routeStruct\(route Route'").
    syntax_highlight.
    print
end

step nil, section: :encodingBuffer do
  file_path("github.com/marcel/jitjson/encoding/buffer.go")
  
  encoding_buffer.
    grep("'func \('").
    syntax_highlight.
    print
    
  wait
    
  sub_heading("Most encoders are straight forward *and* optimal")
  
  encoding_buffer.
    grep("-A 2 'Comma\(\)'").
    syntax_highlight.
    print
    
    puts
    
  encoding_buffer.
    grep("-A 3 ' Float64\(f'").
    syntax_highlight.
    print
  
  wait
  
  sub_heading("String concatenation though has inefficiencies to work around")
  
  wait
  
  code =<<-CODE
  // 
  func (e *Buffer) Quote(s string) {
    s.WriteByte('"')
    s.WriteString(s)
    s.WriteByte('"')
  }
  CODE
  
  code.syntax_highlight.print
end

step nil, dir: string_concat_dir, section: :stringconcat do
  
  sub_heading("Sprintf")
  
  string_concat.
    grep("-A 3 Sprintf").
    syntax_highlight.
    print
    
  wait
  
  sub_heading("ByteBuffer (pre-allocated & re-used)")
  
  string_concat.
    grep("-A 12 ByteBuffer").
    syntax_highlight.
    print
    
  wait
  
  sub_heading("string + string")
  
  string_concat.
    grep("-A 5 Plus").
    syntax_highlight.
    print
  
  wait
  
  sub_heading("[]byte (pre-allocated & re-used)")
  
  string_concat.
    grep("-A 5 Slice").
    syntax_highlight.
    print
  
  wait
  
  string_concat.
    grep("-A 17 'func quo'").
    syntax_highlight.
    print
    
  wait
  
  sub_heading("Results")
  
  cmd("cat cpu.0.bench").
    indent.
    grep("Benchmark").
    highlight('.*Sprintf.*', color: :red, fill_line: true).
    highlight('.*ByteBuffer.*', color: :json, fill_line: true).
    highlight('.*Plus.*', color: :blue, fill_line: true).
    highlight('.*Slice.*', color: :green, fille_line: true).
    print
  
  wait
  
  encoding_buffer.
    grep("-A 12 'quote writes'").
    syntax_highlight.
    print
end

step "So how do we generate this code?", section: :turtles do
  
  wait
  
  turtles =<<-TURTLES
                     _.._    _ 
                   ."\\__/"./`_\\
                 _/__<__>__\\/
               `"/_/""""\\_\\\\
              
                 Generate code...
                            __
                 .,-;-;-,. /'_\\
               _/_/_/_|_\\_\\) /
             '-<_><_><_><_>=/\\
               `/_/====/_/-'\\_\\
                ""     ""    ""
            ...that generates code...
                  __....__
             .-~~/  \\__/  \\~~-.
            /_/``\\__/  \\__/``\\_\\.--.
           /  \\__/  \\__/  \\__/  \\   o`.
       `==/\\__/__\\__/__\\__/__\\__/\\`'--'
          ~/__/__/^^^^^^^^\\__\\__\\~
             ...to generate code
  .---.           _....._
 /  p  `\\     .-""`:     :`"-.
 |__   - |  ,'     .     '    ',
  ._>    \\ /:      :     ;      :,
   '-.    '\\`.     .     :     '  \\
      `.   | .'._.' '._.' '._.'.  |
        `;-\\.   :     :     '   '/,__,
        .-'`'._ '     .     : _.'.__.'
       ((((-'/ `";--..:..--;"` \\
           .'   /           \\   \\
          ((((-'           ((((-'
TURTLES

  center(turtles).print
  puts
  
  center(" Turtles All the Way Down ".highlight('.', color: :money)).indent(11).
    print
end

step "How jitjson works", dir: jit_dir, section: :howitworks do
  struct_finder = cat("ast/json_struct_finder.go")
  
  "1. Recurse down directories looking for .go files".indent.print
  
  wait 
  
  file_path("github.com/marcel/jitjson/ast/json_struct_finder.go")
  
  struct_finder.
    grep("-A 2 'type FileSystemWalker '").
    syntax_highlight.
    print
    
  wait
    
  struct_finder.
    grep("-A 14 ' JSONStructFinder recursively scans'").
    syntax_highlight.
    print
  
  wait
  
  "2. Parse each file".indent.print
  
  wait
  
  struct_finder.
    grep("-A 12 'parser.AllErrors '").
    syntax_highlight.
    print
      
  wait
  
  "3. Traverse the AST looking for json structs".indent.print
  
  wait
    
  cmd("go-ast fixtures/navigation/navigation.go").
    grep("-B 3 -A 33 '31.*Name: \"Route\"'").
    highlight('34 ', color: :ast, full_line: true).
    highlight('38 ', color: :ast, full_line: true).
    highlight('43 ', color: :ast, full_line: true).
    highlight('47 ', color: :ast, full_line: true).
    highlight('55 ', color: :ast, full_line: true).
    highlight('57 ', color: :ast, full_line: true).
    highlight('59 ', color: :ast, full_line: true).
    highlight('57 ', color: :ast, full_line: true).
    highlight('62 ', color: :ast, full_line: true).
    indent.
    print
        
  wait
    
  file_path("github.com/marcel/jitjson/ast/json_struct_finder.go")
  
  struct_finder.
    grep("-A 33 ' FindInAST\('").
    syntax_highlight.
    print
  
  puts
  
  sub_heading("Go's type system makes this class of code very verbose")
    
  wait
  
  "4. Generate code that uses reflection to do bulk of work traversing struct fields".indent.print
  
  wait
  
  meta_encoders = cat("codegen/meta_json_encoders.go")
  
  file_path("github.com/marcel/jitjson/codegen/meta_json_encoders.go")
  
  meta_encoders.
    grep("-A 21 'var tmpl'").
    syntax_highlight.
    print
    
  wait
    
  sub_heading("We are initializing zero valued structs in the runtime scope of the target project's build")  
  
  wait
  
  "5. Compile and run".indent.print
  
  wait 
  
  meta_encoders.
    grep("-A 7 ' ExecGo\('").
    syntax_highlight.
    print
  
  wait
  
  sub_heading("Errors from external processes are propagated by reading STDOUT & STDERR")
  
  wait
  
  "6. In generated code use reflection API to analyze each struct's fields".indent.print
  
  wait
  
  file_path("github.com/marcel/jitjson/codegen/json_encoders.go")
  
  cat("codegen/json_encoders.go").
    grep("-A 26 ' fieldEncodingFor'").
    syntax_highlight.
    print
  
  wait
  
  sub_heading("These encoders need to be implemented recursively for all composite types")
  
  wait
  
  "7. From generated code, generate code which implements optimized reflection-free encoders".indent.print
  
  codegen_json_encoders = cat("codegen/json_encoders.go")
  
  wait
  
  file_path("github.com/marcel/jitjson/codegen/json_encoders.go")
  
  codegen_json_encoders.
    grep("-A 17 ' generateMethodForStruct\('").
    syntax_highlight.
    print
  
  wait
  
  "8. For every package with JSON structs write file with all encoders".indent.print
  
  wait
  
  file_path("github.com/marcel/jitjson/fixtures/navigation/json_encoders.go")
  
  nav_encoder.
    head(21).
    syntax_highlight.
    print
    
  wait
  
  sub_heading("Encoding is done w/ a pool of shared byte buffers, pre-allocated at start up time (w/ configurable size)")  
  
end

step "There are some tricky bits", dir: jit_dir, section: :trickybits do
  codegen_json_encoders = cat("codegen/json_encoders.go")
  
  "1. Traversing arbitrarily nested types (e.g. map[string]map[int][]string) without shadowing variables in scope".
    indent.print
    
    # TODO
  
  wait
  
  "2. Check if a type (or a pointer to that type) implements the json.Marshaler interface and honor that (even if it is slower)".
    indent.print
    
  # TODO
  
  wait
  
  file_path("github.com/marcel/jitjson/codegen/json_encoders.go")
  
  codegen_json_encoders.
    grep("-A 23 'var jsonMarshalerType ='").
    grep("-v TODO").
    syntax_highlight.
    print
  
  wait
  
  "3. Follow pointers via reflection API to base type but ensure they are indirected when invoked in code".
    indent.print
    
    # TODO
end

step "Benchmarks", section: :benchmarks, dir: jit_dir do
  wait
  
  file_path("github.com/benchmarks/benchmark_reflection_test.go")
  
  cat("benchmarks/benchmark_reflection_test.go").
    grep("-A 26 'BenchmarkJSONReflectionMedia'").
    syntax_highlight.
    print
    
  wait
  puts
    
  sub_heading("(the superfluous variable assignments are defending against compiler optimizations)")
  
  wait
  
  file_path("github.com/benchmarks/benchmark_jit_test.go")
  
  cat("benchmarks/benchmark_jit_test.go").
    grep("-A 26 'BenchmarkJSONJitMedia'").
    syntax_highlight.
    print
end

step "Results: media.Album", section: :albumbench, dir: jit_dir do   
  
  wait
  
  cat("benchmarks/pprof/prof.reflect.media.cpu.final.bench").
    grep("Bench").
    highlight('.', color: :red).
    print
  
  sleep(5)
  
  cat("benchmarks/pprof/prof.jit.media.cpu.final.bench").
    grep("Bench").
    highlight('.', color: :green).
    print
        
  results = [" 3.5x Faster ", " 150x Less Garbage ", " 54x Fewer Allocs "].join("| ")

  results.
    highlight('.', color: :json).
    indent(52).
    print
    
  wait
  
  sub_heading("The allocation in jitjson is from time.Time which implements its own json.Marshaler") 
  
  time_marshal_json =<<-CODE
  func (t Time) MarshalJSON() ([]byte, error) {
  	if y := t.Year(); y < 0 || y >= 10000 {
  		// RFC 3339 is clear that years are 4 digits exactly.
  		// See golang.org/issue/4556#c15 for more discussion.
  		return nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")
  	}

  	b := make([]byte, 0, len(RFC3339Nano)+2)
  	b = append(b, '"')
  	b = t.AppendFormat(b, RFC3339Nano)
  	b = append(b, '"')
  	return b, nil
  }
  CODE
  
  time_marshal_json.
    syntax_highlight.
    print

end

step "Results: navigation.Route", section: :routebench, dir: jit_dir do   
  wait
    
  cat("benchmarks/pprof/prof.reflect.nav.cpu.final.bench").
    grep("Bench").
    highlight('.', color: :red).
    print
    
  cat("benchmarks/pprof/prof.jit.nav.cpu.final.bench").
    grep("Bench").
    highlight('.', color: :green).
    print
    
  ["   3.5x Faster ", " ~ ∞ Less Garbage ", "  ~ ∞ Fewer Allocs "].join(" | ").
    highlight('.', color: :json).
    indent(48).
    print

  wait
    
  sub_heading("Zero allocations because we pre-allocate the byte buffers and return a byte slice so no copy")
  
  "var bufferPool = encoding.NewSyncPool(4096)".
    syntax_highlight.
    print
    
  wait
  
  sub_heading("Buffer size can just be configured for your expected work load to avoid one-time allocation hit")
  
  "var bufferPool = encoding.NewSyncPool(16384)".
    syntax_highlight.
    print
  
  wait
  
  sub_heading("Subsequent call to runtime.slicebytetostring *will* allocate")
  
  "bytes, err := media.ExampleAlbum.MarshalJSON()\nreturn string(bytes)\n".
    syntax_highlight.
    print
  
  wait
    
  sub_heading("But from concat benchmarks we saw that its cost is measured in nanoseconds")
end

step "CPU", dir: jit_dir do
  sub_heading("Visualizing reflection")
  instruction(" 12% tax spent in runtime.mallocgc ").indent.print
  wait
  
  cmd "open benchmarks/pprof/prof.reflect.nav.cpu.final.svg"
  
  wait
  
  sub_heading("Visualizing jitjson")
  instruction(" 0% spent in runtime.mallocgc ").indent.print
  wait
  
  cmd "open benchmarks/pprof/prof.jit.nav.cpu.final.svg"
end

step "Memory", dir: jit_dir do
  sub_heading("Visualizing reflection")
  instruction(" 88% from bytes.makeSlice (called when a bytes.Buffer needs to make an allocation to grow) ").indent.print
  wait
  
  cmd "open benchmarks/pprof/reflect.nav.mem.0.svg"
  
  wait
  
  sub_heading("Visualizing jitjson")
  instruction(" 0% from bytes.makeSlice").print
  wait
  
  cmd "open benchmarks/pprof/jit.nav.mem.0.svg"
  
  wait
  
  sub_heading("Fringe benefit: smaller call stack is easier to reason about and debug")
end

step "Bonus: jitjson produces identical JSON to built-in json.Marshal", dir: jit_dir do
  album = cat("fixtures/media/example.json")
    
  side_by_side(album.head(25), album.head(25)).
    syntax_highlight(lang: "json").
    print
end

step "Could jitjson be faster?", section: :faster? do
  wait
  
  "YES! Side-step bytes.Buffer and just operate on pre-allocated []byte slice".highlight('.', color: :json).indent.print
  
  wait
  
  sub_heading("But it would look a lot more like this:")
  
  string_concat.
    grep("-A 17 'func quo'").
    syntax_highlight.
    print
    
  wait
  
  sub_heading("Instead of this:")
  
  nav_encoder.
    grep("-A 20 'routeStruct\(route Route'").
    syntax_highlight.
    print  
end


step "Does it work on real-world projects?" do
  
  wait
  
  sub_heading("Caveat: It's not quite production ready yet. But pretty close.")
end

step "Build integration with `go generate`" do
  
  instruction("Add this comment to the top of your main project file").print
  puts
  
  "//go:generate jitjson gen".syntax_highlight.print
  
  wait
  
  instruction("Add `go generate` step to your build script").print
  puts
  
  "% go generate".indent.print
  
  wait
  
  sub_heading("That's it")

  wait

  sub_heading("Doesn't save any typing but it integrates directly into the tool-chain")
end

step "Prior Art" do
  sub_heading("1. Protocol Buffers for Go with Gadgets")
  file_path("github.com/gogo/protobuf")
  
  sub_heading("2. ffjson")
  file_path("github.com/pquerna/ffjson")
  
  sub_heading("3. easyjson")
  file_path("github.com/mailru/easyjson")
  
  wait
  
  sub_heading("Seems to be a common pratice in Go")  
end

step "ffjson cloc", section: :ffjsoncloc do
  sub_heading("Library code")
  lib_code =<<-TESTS
  -------------------------------------------------------------------------------
  Language                     files          blank        comment           code
  -------------------------------------------------------------------------------
  Go                              44           1400           1924           9464
  -------------------------------------------------------------------------------
  TESTS
  
  lib_code.indent.print
  
  wait
  
  sub_heading("Tests")
  
  tests =<<-TESTS
  -------------------------------------------------------------------------------
  Go                              14            485            263           2570
  -------------------------------------------------------------------------------
  TESTS
  
  tests.indent.print
  
  wait
  
  sub_heading("Couldn't measure coverage because the tests don't compile")
end

step "easyjson cloc", section: :easyjsoncloc do
  sub_heading("Library code")
  lib_code =<<-TESTS
  -------------------------------------------------------------------------------
  Language                     files          blank        comment           code
  -------------------------------------------------------------------------------
  Go                              43           2693            606          16442
  -------------------------------------------------------------------------------
  TESTS
  
  lib_code.indent.print
  
  wait
  
  sub_heading("Tests")
  
  tests =<<-TESTS
  -------------------------------------------------------------------------------
  Go                              11            223              7           1468
  -------------------------------------------------------------------------------
  TESTS
  
  tests.indent.print
  
  wait
  
  sub_heading("Couldn't measure coverage because the tests don't compile, Part 2")
end

step "jitjson cloc", section: :jitjsoncloc do
  sub_heading("Library code")
  lib_code =<<-TESTS
  -------------------------------------------------------------------------------
  Language                     files          blank        comment           code
  -------------------------------------------------------------------------------
  Go                              10            279             58           1051
  -------------------------------------------------------------------------------
  TESTS
  
  lib_code.indent.print
  
  wait
  
  sub_heading("Tests")
  
  tests =<<-TESTS
  -------------------------------------------------------------------------------
  Go                              10            257            114            956
  -------------------------------------------------------------------------------
  TESTS
  
  tests.indent.print
  
  wait
  
  sub_heading("Test Coverage: 90%")
end

step nil, section: :end do
  title("The End", color: :closing_credits)
end
